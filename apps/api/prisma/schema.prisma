// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id           Int     @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String  @unique
  password     String
  role         Role
  referralCode String  @unique

  userDetail UserDetail? @relation()
  point      Point?      @relation()
  reward     Reward?     @relation()
  Event      Event[]

  @@map("users")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

model UserDetail {
  id         Int       @id @default(autoincrement())
  birthDate  DateTime?
  gender     Gender?
  phone      String?
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  userId Int   @unique
  user   User? @relation(fields: [userId], references: [id])

  @@map("user_details")
}

enum Gender {
  MALE
  FEMALE
}

model Point {
  id          Int       @id @default(autoincrement())
  totalPoint  Int
  earnDate    DateTime?
  expiredDate DateTime?

  userId Int   @unique
  user   User? @relation(fields: [userId], references: [id])

  @@map("points")
}

model Reward {
  id      Int    @id @default(autoincrement())
  title   String
  nominal Int

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("rewards")
}

model Event {
  id              Int      @id @default(autoincrement())
  title           String   @unique
  price           Int
  location        String
  description     String   @db.LongText()
  remainingTicket Int
  booked          Int?
  isFree          Boolean?
  startDate       DateTime
  endDate         DateTime
  category        String

  thumbnail String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id])

  @@map("events")
}
